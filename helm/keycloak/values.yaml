nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""

replicaCount: 1
image:
  repository: "ghcr.io/dbildungsplattform/dbp-keycloak"
  tag: ""
  pullPolicy: "Always"

auth:
  # existingSecret: Refers to a secret already present in the cluster, which is required for the authentication and configuration of the database setup tasks.
  existingSecret: ""
  secretName: "dbp-keycloak"
  
  admin_password: ""
  keycloak_rs256_privateKey: ""
  keycloak_rs256_certificate: ""
  keycloak_adminSecret: ""
  keycloak_clientSecret: ""
  keycloak_serviceClientCertificate: ""



# importRealms is used to import realms on startup.
# It will set "--import-realm" as arg to enable realm import on startup.
# This will not recreate existing realms.
importRealms: true

command: []
extraArgs: []
extraVolumes: []
extraVolumeMounts: []

# extraConfig is used to add additional environment variables to the Keycloak container.
extraConfig:
  # The name of the ConfigMap that will be created.
  name: ""
  # If enabled, the ConfigMap will be created with the specified data.
  create: false
  # The data to be added to the ConfigMap.
  data: {}
    # KC_SCHOOLSH_CLIENT_ID: ""
    # KC_SCHOOLSH_CLIENT_ROOT_URL: ""
  # Add additional existing ConfigMaps. These will be active even if enabled is false.
  external: []

# extraSecret is used to add additional secrets to the Keycloak container.
extraSecret:
  # The name of the Secret that will be created.
  name: ""
  # If enabled, the Secret will be created with the specified data.
  create: false
  # The data to be added to the Secret.
  data:
    PI_ADMIN_PASSWORD: ""
    PI_BASE_URL: ""
    PI_ADMIN_USER: ""
    PI_USER_RESOLVER: ""
    PI_REALM: ""
    KC_NEXTCLOUD_CLIENT_ID: ""
    KC_NEXTCLOUD_CLIENT_SECRET: ""
    KC_SCHOOLSH_CLIENT_SECRET: ""
    KC_SCHOOLSH_CLIENT_SIGNING_CERTIFICATE: ""
    KC_SCHOOLSH_CLIENT_ENCRYPTION_CERTIFICATE: ""
    KC_ITSLEARNING_CLIENT_SECRET: ""
    KC_OX_CLIENT_SECRET: ""
  # Add additional existing Secrets. These will be active even if enabled is false.
  external: []

database:
  url: "jdbc:postgresql://db:5432/keycloak"
  username: "keycloak"
  password: ""

realm:
  name: dbildungs-iam-keycloak-realm
  filepath: "dev-realm-spsh.json"

restartPolicy: Always

keycloak:
  hostname: ""
  hostnameBackchannelDynamic: true
  serviceMonitor:
    enabled: true
    path: "/metrics"
    port: 'mgmt'
frontendHostname: ""
keycloak2ndHostname: ""

containerSecurityContext:
  enabled: true
  runAsUser: 1000
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

resources:
  limits:
    memory: "1Gi"
    cpu: "500m"
  requests:
    memory: "1Gi"
    cpu: "150m"

# should be about 4 times the cpu count
threadPool: 16

startupProbe:
  enabled: true
  httpGet:
    path: "/health/started"
    port: mgmt
  periodSeconds: 10
  failureThreshold: 30

livenessProbe:
  enabled: true
  httpGet:
    path: /health/live
    port: mgmt

readinessProbe:
  enabled: true
  httpGet:
    path: "/health/ready"
    port: mgmt

ingress:
  # Only enable if 2nd host name is defined
  enabled2nd: false
  ingressClassName: nginx
  path: /
  pathType: Prefix
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"

containerPorts:

javaOptsAppend: "-Djgroups.dns.query={{ tpl "common.names.fullname" . }}-headless.{{ tpl "common.names.namespace" . }}.svc.cluster.local"

service:
  type: ClusterIP
  http:
    enabled: true
  ports:
    http: 80

serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 60

status:
  url: "https://status.dev.spsh.dbildungsplattform.de/"

podDisruptionBudget:
  enabled: false
  minAvailable: "60%"
